import pandas as pd
import random
import logging
from collections import defaultdict # √ötil para contagem

# Configura√ß√£o do log (o Streamlit usar√° isso)
logging.basicConfig(level=logging.INFO, format="üîÑ %(message)s")

# Colunas esperadas no CSV para as dezenas sorteadas
DEZENAS_COLS = [f"Bola{i}" for i in range(1, 16)] 

def carregar_dados(file_path):
    """Carrega os dados de concursos da Lotof√°cil a partir de um arquivo CSV."""
    logging.info("Iniciando leitura do arquivo...")

    try:
        # Tenta carregar o arquivo CSV com detec√ß√£o autom√°tica de separador
        # Assume-se que o arquivo Lotofacil.csv est√° no diret√≥rio raiz do projeto
        df = pd.read_csv(file_path, sep=None, engine="python", encoding="latin1")

        # Verifica se as colunas de dezenas necess√°rias existem
        if not all(col in df.columns for col in DEZENAS_COLS):
            logging.error("‚ùå O arquivo CSV n√£o cont√©m as colunas de dezenas esperadas (ex: Bola1, Bola2...).")
            return None

        # Remove linhas vazias ou quebradas
        df = df.dropna(how="all")

        logging.info(f"‚úÖ Arquivo carregado com sucesso! Total de concursos: {len(df)}")
        return df

    except Exception as e:
        logging.error(f"‚ùå Erro ao carregar o arquivo: {e}")
        return None

def selecionar_dezenas(df, qtd=18, ultimos=50):
    """Calcula as 'qtd' dezenas mais frequentes nos √∫ltimos 'ultimos' concursos."""
    if df is None or df.empty:
        return list(range(1, qtd + 1)) # Retorna um padr√£o se n√£o houver dados

    logging.info(f"üîÑ Calculando frequ√™ncia nas √∫ltimas {ultimos} colunas...")
    
    # Seleciona apenas os √∫ltimos concursos e as colunas de dezenas
    df_ultimos = df.tail(ultimos)
    
    # Empilha as colunas de dezenas em uma √∫nica s√©rie para contagem de frequ√™ncia
    todas_dezenas = df_ultimos[DEZENAS_COLS].stack()
    
    # Conta a frequ√™ncia e seleciona as 'qtd' mais frequentes
    # O index s√£o os n√∫meros da dezena
    frequencia = todas_dezenas.value_counts().head(qtd)
    
    # Retorna apenas a lista dos n√∫meros (√≠ndices) mais frequentes
    return frequencia.index.astype(int).tolist() # Garante que s√£o inteiros

def gerar_jogos(numeros_sugeridos, qtd_15=0, qtd_16=0, qtd_17=0, qtd_18=0, jogos_fixos=None):
    """Gera jogos aleat√≥rios com base nos n√∫meros sugeridos."""
    jogos = []
    
    # Adiciona jogos fixos primeiro
    if jogos_fixos:
        for jogo in jogos_fixos:
            if len(jogo) == 15: # Apenas jogos de 15 dezenas s√£o suportados como fixos para simplifica√ß√£o
                jogos.append(sorted(jogo))

    logging.info("üîÑ Gerando jogos...")
    
    contadores = {15: qtd_15, 16: qtd_16, 17: qtd_17, 18: qtd_18}
    
    for tamanho in sorted(contadores.keys(), reverse=True):
        for _ in range(contadores[tamanho]):
            if len(numeros_sugeridos) >= tamanho:
                jogos.append(sorted(random.sample(numeros_sugeridos, tamanho)))
            else:
                logging.warning(f"‚ö†Ô∏è N√£o h√° dezenas suficientes ({len(numeros_sugeridos)}) para gerar um jogo de {tamanho}.")

    logging.info(f"‚úÖ Total de jogos gerados: {len(jogos)}")
    return jogos

def avaliar_jogos(jogos, df_concursos):
    """Avalia os jogos gerados contra o hist√≥rico de concursos, contando as ocorr√™ncias de acertos."""
    logging.info("üîÑ Avaliando jogos contra concursos anteriores...")
    
    resultados_finais = []
    
    # Prepara o hist√≥rico de resultados em um formato de lista de conjuntos
    # Usa a constante DEZENAS_COLS para garantir as colunas corretas
    historico_sets = [set(row) for row in df_concursos[DEZENAS_COLS].values.astype(int)]
    
    for idx, jogo in enumerate(jogos, 1):
        jogo_set = set(jogo)
        contagens = defaultdict(int) # Dicion√°rio para contar 11, 12, 13, 14 e 15 acertos
        
        for concurso_set in historico_sets:
            # Calcula quantos n√∫meros do jogo gerado est√£o no concurso
            acertos = len(jogo_set.intersection(concurso_set))
            
            # S√≥ contamos 11 acertos ou mais (os pr√™mios)
            if acertos >= 11:
                contagens[acertos] += 1
                
        # Converte o defaultdict para um dicion√°rio normal para exibi√ß√£o
        resultados_finais.append((idx, jogo, dict(contagens)))
        
    logging.info("‚úÖ Avalia√ß√£o conclu√≠da.")
    return resultados_finais

