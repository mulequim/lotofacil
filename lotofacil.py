"""
üìò M√≥dulo: lotofacil.py
Autor: Marcos Oliveira
Atualizado: Outubro/2025

Fun√ß√µes principais usadas no app ‚ÄúLotof√°cil Inteligente‚Äù.
lotofacil.py
Fun√ß√µes de suporte para o app "Lotof√°cil Inteligente".

Principais responsabilidades:
- carregar dados CSV da Lotof√°cil
- c√°lculos estat√≠sticos (frequ√™ncia, atrasos, pares/√≠mpares, sequ√™ncias)
- gerar jogos balanceados (respeitando tamanhos mistos)
- avaliar jogos contra o hist√≥rico (quantas vezes um jogo teve 11..15 acertos)
- gerar PDFs simples com os jogos
- salvar bol√µes/jogos gerados em CSV
- atualizar base via API da Caixa
"""

import re
import os
import csv
import json
import uuid
import random
import base64
import requests
import pandas as pd
from collections import defaultdict
from collections import Counter
from itertools import combinations
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import cm
from github import Github  # usado apenas na fun√ß√£o atualizar_csv_github (se necess√°rio)


# ---------------------------
# Carregar dados do CSV
# ---------------------------
def carregar_dados(file_path="Lotofacil.csv"):
    """
    L√™ o arquivo CSV da Lotof√°cil, mesmo com campos mistos (',' e ';').
    Faz detec√ß√£o autom√°tica e normaliza os dados.
    """
    try:
        if not os.path.exists(file_path):
            print(f"‚ö†Ô∏è Arquivo {file_path} n√£o encontrado.")
            return None

        # L√™ algumas linhas brutas
        with open(file_path, "r", encoding="utf-8") as f:
            amostra = f.read(4096)

        # Detectar separador dominante (conta mais ocorr√™ncias)
        sep_comma = amostra.count(",")
        sep_semicolon = amostra.count(";")
        sep = "," if sep_comma >= sep_semicolon else ";"

        # L√™ o arquivo usando o separador dominante
        df = pd.read_csv(file_path, sep=sep, engine="python", encoding="utf-8", on_bad_lines="skip", dtype=str)

        # Remove colunas totalmente vazias
        df = df.dropna(axis=1, how="all")
        df = df.dropna(how="all")

        # Corrige nomes se n√£o houver "Bola1"
        if not any("Bola" in c for c in df.columns):
            # tenta identificar as 15 primeiras dezenas (entre 3¬™ e 17¬™ colunas)
            for i in range(1, 16):
                if f"Bola{i}" not in df.columns and i + 1 < len(df.columns):
                    df.rename(columns={df.columns[i + 1]: f"Bola{i}"}, inplace=True)

        print(f"‚úÖ CSV carregado: {len(df)} concursos | separador '{sep}' detectado")
        return df

    except Exception as e:
        print(f"‚ùå Erro ao carregar dados: {e}")
        return None


# ---------------------------
# Estat√≠sticas
# ---------------------------
def _colunas_dezenas(df):
    """Retorna lista de colunas que representam dezenas (contendo 'Bola' ou 'BolaX')."""
    cols = [c for c in df.columns if "Bola" in c or c.lower().startswith("bola")]
    # fallback: colunas entre 1..25 presentes como strings
    if not cols:
        cols = [c for c in df.columns if c.isdigit() and 1 <= int(c) <= 25]
    return cols


def calcular_frequencia(df, ultimos=None):
    """
    Conta quantas vezes cada dezena saiu.
    ultimos=None => usa todo o arquivo (padr√£o alterado para usar tudo)
    """
    dezenas_cols = _colunas_dezenas(df)
    if ultimos is None or ultimos > len(df):
        ultimos = len(df)
    dados = df.tail(ultimos)[dezenas_cols]
    # transforma em series numeric e conta
    valores = pd.Series(pd.to_numeric(dados.values.flatten(), errors="coerce"))
    valores_limpos = valores.dropna().astype(int)
    contagem = Counter(valores_limpos)
    ranking = pd.DataFrame(contagem.most_common(), columns=["Dezena", "Frequ√™ncia"])
    return ranking
 
# ---------------------------
# Atrasos
# ---------------------------
def calcular_atrasos(df):
    dezenas_cols = [f"Bola{i}" for i in range(1, 16)]
    max_atrasos = {d: 0 for d in range(1, 26)}
    atual_atraso = {d: 0 for d in range(1, 26)}

    for _, row in df[::-1].iterrows():
        sorteadas = set(row[dezenas_cols].values)
        for d in range(1, 26):
            if d not in sorteadas:
                atual_atraso[d] += 1
            else:
                max_atrasos[d] = max(max_atrasos[d], atual_atraso[d])
                atual_atraso[d] = 0

    dados = [[d, max_atrasos[d], atual_atraso[d]] for d in range(1, 26)]
    return pd.DataFrame(dados, columns=["Dezena", "M√°x Atraso", "Atraso Atual"])


def calcular_pares_impares(df):
    dezenas_cols = _colunas_dezenas(df)
    resultados = []
    for _, row in df.iterrows():
        dezenas = pd.to_numeric(row[dezenas_cols], errors="coerce").dropna().astype(int)
        pares = sum(1 for d in dezenas if d % 2 == 0)
        impares = len(dezenas) - pares
        resultados.append((pares, impares))
    df_stats = pd.DataFrame(resultados, columns=["Pares", "√çmpares"])
    return df_stats.value_counts().reset_index(name="Ocorr√™ncias")


def calcular_sequencias(df):
    dezenas_cols = _colunas_dezenas(df)
    sequencias = Counter()
    for _, row in df.iterrows():
        dezenas = sorted(pd.to_numeric(row[dezenas_cols], errors="coerce").dropna().astype(int))
        seq = 1
        for i in range(1, len(dezenas)):
            if dezenas[i] == dezenas[i - 1] + 1:
                seq += 1
            else:
                if seq >= 2:
                    sequencias[seq] += 1
                seq = 1
        if seq >= 2:
            sequencias[seq] += 1
    return pd.DataFrame(sequencias.items(), columns=["Tamanho Sequ√™ncia", "Ocorr√™ncias"])


def analisar_combinacoes_repetidas(df):
    dezenas_cols = _colunas_dezenas(df)
    combos = Counter()
    for _, row in df.iterrows():
        dezenas = sorted(pd.to_numeric(row[dezenas_cols], errors="coerce").dropna().astype(int))
        combos.update(combinations(dezenas, 2))
    return pd.DataFrame(combos.most_common(20), columns=["Combina√ß√£o", "Ocorr√™ncias"])


# ---------------------------
# Gera√ß√£o de jogos (respeitando tamanho)
# ---------------------------
def gerar_jogos_balanceados(df, qtd_jogos=4, tamanho=15):
    """
    Gera 'qtd_jogos' jogos com exatamente 'tamanho' dezenas cada.
    Estrat√©gia:
      - pega top frequentes (peso alto)
      - pega top atrasadas (peso m√©dio)
      - completa aleatoriamente garantindo diversidade e tamanho exato
    Retorna lista de tuplas (jogo_sorted_list, origem_dict)
    """
    try:
        if tamanho < 15 or tamanho > 20:
            raise ValueError("tamanho deve estar entre 15 e 20")

        dezenas_cols = _colunas_dezenas(df)
        # ranking frequ√™ncia (todo hist√≥rico)
        freq_df = calcular_frequencia(df, ultimos=len(df))
        top_freq = freq_df.head(12)["Dezena"].tolist() if not freq_df.empty else list(range(1, 26))

        # ranking atrasadas
        atrasos_df = (df)
        top_atraso = atrasos_df.sort_values("Atraso Atual", ascending=False)["Dezena"].head(10).tolist()

        jogos = []
        for _ in range(qtd_jogos):
            jogo = set()
            origem = {}

            # adicionar at√© 6 frequentes, mas sem ultrapassar tamanho
            qtd_freq = min(6, tamanho - 5)  # garante espa√ßo para outras categorias
            for d in random.sample(top_freq, min(qtd_freq, len(top_freq))):
                jogo.add(int(d))
                origem[int(d)] = "frequente"

            # adicionar at√© 4 atrasadas
            qtd_atr = min(4, tamanho - len(jogo))
            for d in random.sample(top_atraso, min(qtd_atr, len(top_atraso))):
                if d not in jogo:
                    jogo.add(int(d))
                    origem[int(d)] = "atrasada"

            # completar com n√∫meros aleat√≥rios mantendo 1..25
            while len(jogo) < tamanho:
                d = random.randint(1, 25)
                if d not in jogo:
                    jogo.add(d)
                    origem[d] = origem.get(d, "aleatoria")

            jogo_final = sorted(jogo)[:tamanho]  # garantir tamanho exato
            # ajustar origem dict apenas para as dezenas do jogo_final
            origem_final = {d: origem.get(d, "aleatoria") for d in jogo_final}
            jogos.append((jogo_final, origem_final))

        return jogos
    except Exception as e:
        print("Erro gerar_jogos_balanceados:", e)
        return []


# ---------------------------
# ‚úÖ Avalia√ß√£o hist√≥rica dos jogos
# ---------------------------

def avaliar_jogos_historico(df, jogos):
    """
    Avalia cada jogo (lista de dezenas) comparando com o hist√≥rico de concursos (df).
    Conta quantas vezes o jogo teria feito 11, 12, 13, 14 ou 15 acertos.

    Par√¢metros:
        df (pd.DataFrame): DataFrame com o hist√≥rico (pode conter colunas extras).
        jogos: lista onde cada item √©:
               - uma lista/tupla de dezenas [1,2,3,...]
               - ou (jogo, origem) como seu gerador produz [( [..], {...} ), ...]

    Retorna:
        pd.DataFrame com colunas ["Jogo", "Dezenas", "11 pts", "12 pts", "13 pts", "14 pts", "15 pts"]
    """

    # 1) Detectar automaticamente colunas de dezenas (melhor esfor√ßo)
    # Crit√©rio: coluna que, em boa parte das linhas, cont√©m inteiros entre 1 e 25.
    poss√≠veis = []
    n_linhas = min(50, len(df)) if len(df) > 0 else 0

    for col in df.columns:
        sucesso = 0
        total = 0
        for _, row in df.head(n_linhas).iterrows():
            val = row[col]
            if pd.isna(val):
                continue
            s = str(val).strip()
            # tenta converter direto
            try:
                v = int(re.sub(r'\D', '', s)) if re.search(r'\d', s) else None
                if v is not None and 1 <= v <= 25:
                    sucesso += 1
            except:
                pass
            total += 1
        # se a coluna tem boa taxa de valores 1..25, considera
        if total > 0 and (sucesso / total) >= 0.5:
            poss√≠veis.append(col)

    # Ordena por posi√ß√£o original das colunas e pega at√© 15
    poss√≠veis = sorted(poss√≠veis, key=lambda c: list(df.columns).index(c))
    dezenas_cols = poss√≠veis[:15]

    # Se n√£o detectou, tenta fallback simples: usar as colunas 2..16 (como muitos CSVs t√™m formato)
    if len(dezenas_cols) < 15:
        fallback = list(df.columns)[2:17]
        dezenas_cols = fallback if len(fallback) >= 15 else dezenas_cols

    # 2) Monta lista de conjuntos (cada concurso -> set de 15 dezenas)
    concursos = []
    for _, row in df.iterrows():
        dezenas_row = []
        # tenta primeiro pelas colunas detectadas
        for col in dezenas_cols:
            try:
                val = row[col]
                if pd.isna(val):
                    continue
                s = str(val).strip()
                # extrai n√∫mero se houver ru√≠do (ex: "R$ 1.234,00" -> 123400 n√£o √© dezena,
                # mas se a c√©lula for "01" ou "1" ou " 1 " ou "03" etc, ser√° convertido)
                # melhor tentar extrair d√≠gitos curtos com regex de 1-2 chars
                m = re.search(r'\b([0-9]{1,2})\b', s)
                if m:
                    v = int(m.group(1))
                    if 1 <= v <= 25:
                        dezenas_row.append(v)
                else:
                    # como fallback, tentar converter inteiro direto
                    try:
                        v = int(s)
                        if 1 <= v <= 25:
                            dezenas_row.append(v)
                    except:
                        pass
            except Exception:
                continue

        # Se n√£o achou 15 dezenas nas colunas detectadas, tenta extrair quaisquer n√∫meros na linha inteira
        if len(dezenas_row) < 15:
            linha_concat = " ".join(str(x) for x in row.values)
            achados = re.findall(r'\b([0-9]{1,2})\b', linha_concat)
            dezenas_row = [int(x) for x in achados if 1 <= int(x) <= 25][:15]

        if len(dezenas_row) == 15:
            concursos.append(set(dezenas_row))
        # caso n√£o consiga extrair 15 dezenas, ignora essa linha (evita falsos positivos)

    # 3) Normalizar entrada 'jogos' para lista de listas de inteiros
    jogos_list = []
    for item in jogos:
        if isinstance(item, (list, tuple)) and len(item) > 0 and isinstance(item[0], (list, tuple, set)):
            # formato (jogo, origem) -> pega item[0]
            jogo = item[0]
        elif isinstance(item, (list, tuple, set)) and (all(isinstance(x, int) or (isinstance(x, str) and x.isdigit()) for x in item)):
            jogo = item
        else:
            # formato inesperado: tenta extrair n√∫meros com regex
            s = str(item)
            nums = re.findall(r'\b([0-9]{1,2})\b', s)
            jogo = [int(x) for x in nums]
        # garantir inteiros
        jogo_ints = [int(x) for x in jogo]
        jogos_list.append(sorted(set([d for d in jogo_ints if 1 <= d <= 25])))

    # 4) Para cada jogo, contar ocorr√™ncias de 11..15
    linhas = []
    for idx, jogo in enumerate(jogos_list, start=1):
        cont = defaultdict(int)
        jogo_set = set(jogo)
        for sorteadas in concursos:
            acertos = len(jogo_set & sorteadas)
            if acertos >= 11:
                cont[acertos] += 1
        linhas.append({
            "Jogo": idx,
            "Dezenas": " ".join(f"{d:02d}" for d in sorted(jogo)),
            "11 pts": cont[11],
            "12 pts": cont[12],
            "13 pts": cont[13],
            "14 pts": cont[14],
            "15 pts": cont[15],
        })

    return pd.DataFrame(linhas)

# ---------------------------
# Salvar bol√£o completo (c√≥digo para busca futura)
# ---------------------------
def salvar_bolao_csv(
    jogos, participantes, pix, valor_total, valor_por_pessoa,
    concurso_base=None, file_path="jogos_gerados.csv"
):
    """
    Salva o bol√£o (com seus jogos e dados) no reposit√≥rio GitHub,
    no arquivo 'jogos_gerados.csv', sem sobrescrever o conte√∫do anterior.

    Requisitos:
      - Vari√°vel de ambiente GH_TOKEN configurada
      - Reposit√≥rio com permiss√£o de escrita
    """

    try:
        # --- Configura√ß√£o inicial ---
        token = os.getenv("GH_TOKEN")
        if not token:
            return "‚ùå Token do GitHub (GH_TOKEN) n√£o configurado."

        g = Github(token)
        repo = g.get_repo("mulequim/lotofacil")  # üîß ajuste se o reposit√≥rio tiver outro nome
        data_hora = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        codigo = f"B{datetime.now().strftime('%Y%m%d_%H%M%S')}"

        # --- Monta a linha de dados ---
        dados = {
            "CodigoBolao": codigo,
            "DataHora": data_hora,
            "Participantes": participantes,
            "Pix": pix,
            "QtdJogos": len(jogos),
            "ValorTotal": round(valor_total, 2),
            "ValorPorPessoa": round(valor_por_pessoa, 2),
            "Jogos": json.dumps([sorted(list(j)) for j, _ in jogos]),
            "ConcursoBase": concurso_base or ""
        }

        # --- Tenta obter o arquivo do GitHub ---
        try:
            contents = repo.get_contents(file_path)
            csv_data = base64.b64decode(contents.content).decode("utf-8").strip().split("\n")
            linhas = [l.split(",") for l in csv_data]

            # Verifica se cabe√ßalho est√° presente
            if "CodigoBolao" not in linhas[0]:
                linhas.insert(0, list(dados.keys()))

        except Exception:
            # Se o arquivo n√£o existir ainda, cria novo
            linhas = [list(dados.keys())]

        # --- Adiciona a nova linha ---
        linhas.append([str(v) for v in dados.values()])

        # --- Reconstr√≥i CSV ---
        novo_csv = "\n".join([",".join(l) for l in linhas])

        # --- Atualiza ou cria arquivo no GitHub ---
        if "contents" in locals():
            repo.update_file(
                path=file_path,
                message=f"Adiciona bol√£o {codigo}",
                content=novo_csv,
                sha=contents.sha,
                branch="main"
            )
        else:
            repo.create_file(
                path=file_path,
                message=f"Cria arquivo com bol√£o {codigo}",
                content=novo_csv,
                branch="main"
            )

        return codigo

    except Exception as e:
        return f"‚ùå Erro ao salvar bol√£o: {e}"


# ---------------------------
# √öltimo concurso da Caixa
# ---------------------------
def obter_concurso_atual_api():
    try:
        url = "https://servicebus2.caixa.gov.br/portaldeloterias/api/lotofacil"
        headers = {"accept": "application/json"}
        response = requests.get(url, headers=headers, timeout=10)
        if response.status_code == 200:
            data = response.json()
            return {
                "numero": data["numero"],
                "dataApuracao": data["dataApuracao"],
                "dezenas": [int(d) for d in data["listaDezenas"]],
            }
        return None
    except Exception:
        return None


# ---------------------------
# Atualizar CSV local e/ou GitHub com concursos faltantes
# ---------------------------
def atualizar_csv_github():
    """
    Atualiza o arquivo Lotofacil.csv no GitHub, incluindo agora as informa√ß√µes
    de premia√ß√£o (rateios de 11 a 15 acertos) para cada concurso.
    """
    try:
        base_url = "https://servicebus2.caixa.gov.br/portaldeloterias/api/lotofacil"
        headers = {"accept": "application/json"}

        # 1Ô∏è‚É£ Obter o √∫ltimo concurso dispon√≠vel na API da Caixa
        response = requests.get(base_url, headers=headers, timeout=10)
        if response.status_code != 200:
            return "‚ùå Erro ao acessar API da Caixa (n√£o conseguiu obter o √∫ltimo concurso)."

        data = response.json()
        ultimo_disponivel = int(data["numero"])

        # 2Ô∏è‚É£ Obter CSV atual do GitHub
        token = os.getenv("GH_TOKEN")
        if not token:
            return "‚ùå Token do GitHub n√£o encontrado. Configure o segredo GH_TOKEN."

        g = Github(token)
        repo = g.get_repo("mulequim/lotofacil")
        file_path = "Lotofacil.csv"
        contents = repo.get_contents(file_path)
        csv_data = base64.b64decode(contents.content).decode("utf-8").strip().split("\n")

        linhas = [l.split(",") for l in csv_data]
        ultimo_no_csv = int(linhas[-1][0])

        # 3Ô∏è‚É£ Caso o CSV j√° esteja atualizado
        if ultimo_no_csv >= ultimo_disponivel:
            return f"‚úÖ Base j√° est√° atualizada (√∫ltimo concurso: {ultimo_disponivel})."

        novos_concursos = []
        for numero in range(ultimo_no_csv + 1, ultimo_disponivel + 1):
            url = f"{base_url}/{numero}"
            r = requests.get(url, headers=headers, timeout=10)
            if r.status_code != 200:
                print(f"‚ö†Ô∏è Concurso {numero} n√£o encontrado ou ainda n√£o dispon√≠vel.")
                continue

            dados = r.json()
            dezenas = [int(d) for d in dados["listaDezenas"]]

            # --- Extrair informa√ß√µes de premia√ß√£o ---
            rateios = {faixa["faixa"]: faixa for faixa in dados.get("listaRateioPremio", [])}
            premios = []
            for faixa in range(1, 6):  # Faixas 1 a 5 = 15 a 11 acertos
                faixa_info = rateios.get(faixa, {})
                valor = faixa_info.get("valorPremio", 0)
                ganhadores = faixa_info.get("numeroDeGanhadores", 0)
                valor_formatado = f"R$ {valor:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
                premios.extend([valor_formatado, str(ganhadores)])

            nova_linha = (
                [str(dados["numero"]), dados["dataApuracao"]] +
                [str(d) for d in dezenas] +
                premios
            )
            novos_concursos.append(nova_linha)
            print(f"‚úÖ Concurso {numero} obtido e adicionado com premia√ß√£o.")

        # 4Ô∏è‚É£ Atualizar CSV no GitHub
        if not novos_concursos:
            return "‚úÖ Nenhum concurso novo encontrado."

        # --- Cabe√ßalho completo, com as novas colunas ---
        cabecalho = (
            ["Concurso", "Data"] +
            [f"Bola{i}" for i in range(1, 16)] +
            ["Premio15", "Ganhadores15", "Premio14", "Ganhadores14",
             "Premio13", "Ganhadores13", "Premio12", "Ganhadores12",
             "Premio11", "Ganhadores11"]
        )

        # Verifica se o cabe√ßalho j√° est√° no arquivo
        if "Premio15" not in linhas[0]:
            # Substitui o cabe√ßalho antigo por um novo completo
            linhas[0] = cabecalho

        linhas.extend(novos_concursos)
        novo_csv = "\n".join([",".join(l) for l in linhas])

        repo.update_file(
            path=file_path,
            message=f"Atualiza concursos at√© {ultimo_disponivel} (com premia√ß√£o)",
            content=novo_csv,
            sha=contents.sha,
            branch="main"
        )

        return f"üéâ Base atualizada at√© o concurso {ultimo_disponivel} (adicionados {len(novos_concursos)} concursos com premia√ß√£o)."

    except Exception as e:
        return f"‚ùå Erro ao atualizar base: {e}"

# ---------------------------
# Valor da aposta
# ---------------------------
def calcular_valor_aposta(qtd_dezenas):
    precos = {15: 3.50, 16: 56.00, 17: 476.00, 18: 2856.00, 19: 13566.00, 20: 54264.00}
    return precos.get(qtd_dezenas, 0)


# ---------------------------
# Gerar PDF simples com bol√£o
# ---------------------------
def gerar_pdf_jogos(jogos, nome="Bol√£o", participantes="", pix=""):
    participantes_lista = [p.strip() for p in participantes.split(",") if p.strip()]
    num_participantes = len(participantes_lista) if participantes_lista else 1
    valor_total = sum(calcular_valor_aposta(len(j)) for j, _ in jogos)
    valor_por_pessoa = valor_total / num_participantes if num_participantes else valor_total

    file_name = f"bolao_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    c = canvas.Canvas(file_name, pagesize=A4)
    largura, altura = A4
    y = altura - 2 * cm

    c.setFont("Helvetica-Bold", 14)
    c.drawString(2 * cm, y, f"üéØ {nome}")
    y -= 1 * cm
    c.setFont("Helvetica", 10)
    c.drawString(2 * cm, y, f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    y -= 0.8 * cm

    c.drawString(2 * cm, y, "Participantes:")
    y -= 0.5 * cm
    for p in participantes_lista:
        c.drawString(2.5 * cm, y, f"- {p}")
        y -= 0.4 * cm

    c.drawString(2 * cm, y, f"PIX: {pix if pix else '-'}")
    y -= 0.8 * cm

    c.drawString(2 * cm, y, f"Total de jogos: {len(jogos)}  |  Valor total: R$ {valor_total:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
    y -= 0.8 * cm

    for i, (jogo, origem) in enumerate(jogos, start=1):
        if y < 3 * cm:
            c.showPage()
            y = altura - 2 * cm
        c.setFont("Helvetica", 11)
        c.drawString(2 * cm, y, f"Jogo {i} ({len(jogo)} dezenas): {' '.join(str(d).zfill(2) for d in jogo)}")
        y -= 0.6 * cm

    c.save()
    return file_name


