"""
üìò M√≥dulo: lotofacil.py
Autor: Marcos Oliveira
Atualizado: Outubro/2025

Fun√ß√µes principais usadas no app ‚ÄúLotof√°cil Inteligente‚Äù.
Foco na estabilidade de leitura de dezenas para c√°lculo de atrasos e estat√≠sticas,
utilizando a nova base de dados Lotofacil_Concursos.csv.
"""

import re
import os
import csv
import json
import uuid
import random
import base64
import requests
import pandas as pd
import numpy as np
from collections import defaultdict
from collections import Counter
from itertools import combinations
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import cm
# from github import Github  # Depende do ambiente

# ---------------------------
# Carregar dados do CSV e Limpeza
# ---------------------------

def carregar_dados(file_path="Lotofacil_Concursos.csv"):
    """
    L√™ o arquivo CSV (agora usando a base 'Lotofacil_Concursos.csv' mais limpa).
    Aplica pr√©-limpeza bruta nas colunas de dezenas para garantir que apenas
    d√≠gitos sejam lidos, evitando erros de leitura.
    """
    try:
        # --- 1. Carregamento ---
        if not os.path.exists(file_path):
            print(f"‚ö†Ô∏è Arquivo {file_path} n√£o encontrado.")
            return None
        
        # Assume o separador v√≠rgula, comum em CSVs da Caixa/Web
        sep = "," 
        df = pd.read_csv(file_path, sep=sep, engine="python", encoding="utf-8", on_bad_lines="skip", dtype=str)
        df = df.dropna(axis=1, how="all").dropna(how="all")
        
        # --- 2. Identifica√ß√£o das colunas 2 a 16 ---
        all_cols = list(df.columns)
        
        # Assume que as dezenas come√ßam na 3¬™ coluna (√≠ndice 2)
        if len(all_cols) < 17:
             dezenas_cols = all_cols[2:]
        else:
             dezenas_cols = all_cols[2:17]

        # --- 3. Limpeza Bruta (Remove tudo que n√£o √© d√≠gito ou NaN) ---
        for col in dezenas_cols:
            if col in df.columns:
                # Remove todos os caracteres que n√£o s√£o d√≠gitos (0-9)
                df[col] = df[col].astype(str).str.replace(r'[^\d]', '', regex=True)
        
        return df

    except Exception as e:
        print(f"‚ùå Erro ao carregar/limpar dados: {e}")
        return None

# ---------------------------
# C√°lculo de Atrasos (Fun√ß√£o Central Corrigida)
# ---------------------------

def calcular_atrasos(df):
    """
    FINAL DEFINITIVA (V7): Calcula o atraso atual e o atraso m√°ximo de cada dezena (1..25).
    Utiliza o DataFrame pr√©-limpo e aplica a l√≥gica de M√°ximo Atraso e Atraso Atual
    em um √∫nico passo.
    """
    if df is None or df.empty:
        return pd.DataFrame(columns=["Dezena", "M√°x Atraso", "Atraso Atual"])

    try:
        all_cols = list(df.columns)
        if len(all_cols) < 17:
             raise ValueError("DF n√£o tem 17 colunas m√≠nimas para dezenas.")
        dezenas_cols = all_cols[2:17]

        # 1. EXTRA√á√ÉO: Converte em n√∫mero e filtra o dom√≠nio (1 a 25)
        # O DF j√° est√° limpo de sujeira, ent√£o a convers√£o √© mais confi√°vel.
        df_dezenas = df[dezenas_cols].apply(pd.to_numeric, errors='coerce')
        
        # Filtra QUALQUER n√∫mero fora da faixa 1-25 (Corrige o M√°x Atraso Irreal)
        df_dezenas = df_dezenas.mask((df_dezenas < 1) | (df_dezenas > 25))

        concursos = []
        for _, row in df_dezenas.iterrows():
            dezenas_finais = row.dropna().astype(int).tolist()
            concursos.append(set(dezenas_finais))

        if not concursos:
            raise ValueError("Nenhuma dezena p√¥de ser extra√≠da ap√≥s convers√£o.")

        # 2. Calcula em um √∫nico passo (M√°x Atraso e Atraso Atual)
        max_atraso = {d: 0 for d in range(1, 26)}
        contador = {d: 0 for d in range(1, 26)}

        for sorteadas in concursos:
            for d in range(1, 26):
                if d in sorteadas:
                    # Se saiu, atualiza M√°ximo e zera o contador
                    max_atraso[d] = max(max_atraso[d], contador[d])
                    contador[d] = 0
                else:
                    # Se n√£o saiu, incrementa o atraso
                    contador[d] += 1

        # 3. Finaliza: O contador √© o Atraso Atual
        atraso_atual = contador
        for d in range(1, 26):
             # Atualiza o M√°ximo Atraso, caso o Atraso Atual seja o maior da hist√≥ria
             max_atraso[d] = max(max_atraso[d], atraso_atual[d])

        df_out = pd.DataFrame(
            [[d, max_atraso[d], atraso_atual[d]] for d in range(1, 26)],
            columns=["Dezena", "M√°x Atraso", "Atraso Atual"]
        )

        return df_out.sort_values("Atraso Atual", ascending=False).reset_index(drop=True)

    except Exception as e:
        print(f"‚ùå Erro em calcular_atrasos: {e}")
        return pd.DataFrame(columns=["Dezena", "M√°x Atraso", "Atraso Atual"])


# ---------------------------
# Fun√ß√µes de Suporte √† Estat√≠stica
# ---------------------------

def _colunas_dezenas(df):
    """Retorna lista estrita das colunas de dezenas (√≠ndice 2 a 16)."""
    all_cols = list(df.columns)
    if len(all_cols) < 17:
        return []
    return all_cols[2:17]


def calcular_frequencia(df, ultimos=None):
    """Conta quantas vezes cada dezena saiu no per√≠odo especificado."""
    dezenas_cols = _colunas_dezenas(df)
    if not dezenas_cols:
        return pd.DataFrame(columns=["Dezena", "Frequ√™ncia"])
        
    if ultimos is None or ultimos > len(df):
        ultimos = len(df)
        
    # O DF j√° est√° pr√©-limpo (s√≥ cont√©m n√∫meros e NaN), facilitando a convers√£o
    dados = df.tail(ultimos)[dezenas_cols]
    valores = pd.to_numeric(dados.values.flatten(), errors="coerce")
    valores_limpos = pd.Series(valores).dropna().astype(int)
    
    contagem = Counter(valores_limpos)
    ranking = pd.DataFrame(contagem.most_common(), columns=["Dezena", "Frequ√™ncia"])
    
    # Garante que todas as 25 dezenas apare√ßam (com frequ√™ncia 0 se ausentes)
    todas_dezenas = pd.DataFrame({"Dezena": range(1, 26)})
    ranking = todas_dezenas.merge(ranking, on="Dezena", how="left").fillna(0)
    
    return ranking.sort_values("Frequ√™ncia", ascending=False).reset_index(drop=True)


def calcular_pares_impares(df):
    """Calcula a frequ√™ncia das combina√ß√µes de Pares/√çmpares."""
    dezenas_cols = _colunas_dezenas(df)
    if not dezenas_cols:
        return pd.DataFrame(columns=["Pares", "√çmpares", "Ocorr√™ncias"])
        
    df_dezenas = df[_colunas_dezenas(df)].apply(pd.to_numeric, errors='coerce')
    
    resultados = []
    for _, row in df_dezenas.iterrows():
        dezenas = row.dropna().astype(int)
        dezenas = dezenas[(dezenas >= 1) & (dezenas <= 25)] 
        
        pares = sum(1 for d in dezenas if d % 2 == 0)
        impares = len(dezenas) - pares
        
        # S√≥ conta se o concurso tiver 15 dezenas lidas corretamente
        if len(dezenas) == 15:
             resultados.append((pares, impares))
             
    df_stats = pd.DataFrame(resultados, columns=["Pares", "√çmpares"])
    return df_stats.value_counts().reset_index(name="Ocorr√™ncias")


def calcular_sequencias(df):
    """Calcula a frequ√™ncia dos tamanhos de sequ√™ncias (2 ou mais n√∫meros consecutivos)."""
    dezenas_cols = _colunas_dezenas(df)
    if not dezenas_cols:
        return pd.DataFrame(columns=["Tamanho Sequ√™ncia", "Ocorr√™ncias"])
        
    df_dezenas = df[_colunas_dezenas(df)].apply(pd.to_numeric, errors='coerce')
    sequencias = Counter()
    
    for _, row in df_dezenas.iterrows():
        dezenas = sorted(row.dropna().astype(int))
        
        if len(dezenas) < 15: # Ignora concursos incompletos
            continue
            
        seq = 1
        for i in range(1, len(dezenas)):
            if dezenas[i] == dezenas[i - 1] + 1:
                seq += 1
            else:
                if seq >= 2:
                    sequencias[seq] += 1
                seq = 1
        if seq >= 2:
            sequencias[seq] += 1
            
    return pd.DataFrame(sequencias.items(), columns=["Tamanho Sequ√™ncia", "Ocorr√™ncias"]).sort_values("Tamanho Sequ√™ncia").reset_index(drop=True)


def analisar_combinacoes_repetidas(df):
    """Analisa a frequ√™ncia das combina√ß√µes de pares (duques) sorteadas."""
    dezenas_cols = _colunas_dezenas(df)
    if not dezenas_cols:
        return pd.DataFrame(columns=["Combina√ß√£o", "Ocorr√™ncias"])

    df_dezenas = df[_colunas_dezenas(df)].apply(pd.to_numeric, errors='coerce')
    combos = Counter()
    
    for _, row in df_dezenas.iterrows():
        dezenas = sorted(row.dropna().astype(int))
        if len(dezenas) >= 15:
             combos.update(combinations(dezenas, 2))
             
    return pd.DataFrame(combos.most_common(20), columns=["Combina√ß√£o", "Ocorr√™ncias"])


# ---------------------------
# Fun√ß√µes de Gera√ß√£o de Jogos (Ajustadas)
# ---------------------------

def gerar_jogos_balanceados(df, qtd_jogos=4, tamanho=15):
    """
    Gera jogos balanceados usando estat√≠sticas de frequ√™ncia e atraso.
    """
    try:
        if tamanho < 15 or tamanho > 20:
            raise ValueError("tamanho deve estar entre 15 e 20")

        # 1. Obter Estat√≠sticas da base limpa
        df_atrasos = calcular_atrasos(df)
        df_frequencia = calcular_frequencia(df)
        
        # Obter Top 12 Frequentes (dezenas com maior frequ√™ncia)
        top_freq = df_frequencia.head(12)["Dezena"].tolist()

        # Obter Top 10 Atrasadas (dezenas com maior atraso atual)
        top_atraso = df_atrasos.head(10)["Dezena"].tolist()

        # 2. Gera√ß√£o dos Jogos
        jogos = []
        for _ in range(qtd_jogos):
            jogo = set()
            origem = {}

            # Adicionar Dezenas Frequentes (at√© 6)
            qtd_freq = min(6, tamanho - 5)
            for d in random.sample(top_freq, min(qtd_freq, len(top_freq))):
                jogo.add(int(d))
                origem[int(d)] = "frequente"

            # Adicionar Dezenas Atrasadas (at√© 4)
            qtd_atr = min(4, tamanho - len(jogo))
            candidatas_atr = [d for d in top_atraso if d not in jogo]
            for d in random.sample(candidatas_atr, min(qtd_atr, len(candidatas_atr))):
                jogo.add(int(d))
                origem[int(d)] = "atrasada"

            # Completar com n√∫meros aleat√≥rios (mantendo 1..25)
            while len(jogo) < tamanho:
                d = random.randint(1, 25)
                if d not in jogo:
                    jogo.add(d)
                    origem[d] = origem.get(d, "aleatoria")

            jogo_final = sorted(jogo)[:tamanho]
            origem_final = {d: origem.get(d, "aleatoria") for d in jogo_final}
            jogos.append((jogo_final, origem_final))

        return jogos
    except Exception as e:
        print("Erro gerar_jogos_balanceados:", e)
        return []

# ---------------------------
# Fun√ß√µes de Servi√ßo (API, PDF, Bol√£o - Simula√ß√µes/Adapta√ß√µes)
# ---------------------------

def calcular_valor_aposta(qtd_dezenas):
    """Calcula o custo da aposta."""
    precos = {15: 3.50, 16: 56.00, 17: 476.00, 18: 2856.00, 19: 13566.00, 20: 54264.00}
    return precos.get(qtd_dezenas, 0)


# ---------------------------
# Salvar bol√£o completo (c√≥digo para busca futura)
# ---------------------------
def salvar_bolao_csv(
    jogos, participantes, pix, valor_total, valor_por_pessoa,
    concurso_base=None, file_path="jogos_gerados.csv"
):
    """
    Salva o bol√£o (com seus jogos e dados) no reposit√≥rio GitHub,
    no arquivo 'jogos_gerados.csv', sem sobrescrever o conte√∫do anterior.

    Requisitos:
      - Vari√°vel de ambiente GH_TOKEN configurada
      - Reposit√≥rio com permiss√£o de escrita
    """

    try:
        # --- Configura√ß√£o inicial ---
        token = os.getenv("GH_TOKEN")
        if not token:
            return "‚ùå Token do GitHub (GH_TOKEN) n√£o configurado."

        g = Github(token)
        repo = g.get_repo("mulequim/lotofacil")  # üîß ajuste se o reposit√≥rio tiver outro nome
        data_hora = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        codigo = f"B{datetime.now().strftime('%Y%m%d_%H%M%S')}"

        # --- Monta a linha de dados ---
        dados = {
            "CodigoBolao": codigo,
            "DataHora": data_hora,
            "Participantes": participantes,
            "Pix": pix,
            "QtdJogos": len(jogos),
            "ValorTotal": round(valor_total, 2),
            "ValorPorPessoa": round(valor_por_pessoa, 2),
            "Jogos": json.dumps([sorted(list(j)) for j, _ in jogos]),
            "ConcursoBase": concurso_base or ""
        }

        # --- Tenta obter o arquivo do GitHub ---
        try:
            contents = repo.get_contents(file_path)
            csv_data = base64.b64decode(contents.content).decode("utf-8").strip().split("\n")
            linhas = [l.split(",") for l in csv_data]

            # Verifica se cabe√ßalho est√° presente
            if "CodigoBolao" not in linhas[0]:
                linhas.insert(0, list(dados.keys()))

        except Exception:
            # Se o arquivo n√£o existir ainda, cria novo
            linhas = [list(dados.keys())]

        # --- Adiciona a nova linha ---
        linhas.append([str(v) for v in dados.values()])

        # --- Reconstr√≥i CSV ---
        novo_csv = "\n".join([",".join(l) for l in linhas])

        # --- Atualiza ou cria arquivo no GitHub ---
        if "contents" in locals():
            repo.update_file(
                path=file_path,
                message=f"Adiciona bol√£o {codigo}",
                content=novo_csv,
                sha=contents.sha,
                branch="main"
            )
        else:
            repo.create_file(
                path=file_path,
                message=f"Cria arquivo com bol√£o {codigo}",
                content=novo_csv,
                branch="main"
            )

        return codigo

    except Exception as e:
        return f"‚ùå Erro ao salvar bol√£o: {e}"


# ---------------------------
# √öltimo concurso da Caixa
# ---------------------------
def obter_concurso_atual_api():
    try:
        url = "https://servicebus2.caixa.gov.br/portaldeloterias/api/lotofacil"
        headers = {"accept": "application/json"}
        response = requests.get(url, headers=headers, timeout=10)
        if response.status_code == 200:
            data = response.json()
            return {
                "numero": data["numero"],
                "dataApuracao": data["dataApuracao"],
                "dezenas": [int(d) for d in data["listaDezenas"]],
            }
        return None
    except Exception:
        return None


# ---------------------------
# Atualizar CSV local e/ou GitHub com concursos faltantes
# ---------------------------
def atualizar_csv_github():
    """
    Atualiza o arquivo Lotofacil.csv no GitHub, incluindo agora as informa√ß√µes
    de premia√ß√£o (rateios de 11 a 15 acertos) para cada concurso.
    """
    try:
        base_url = "https://servicebus2.caixa.gov.br/portaldeloterias/api/lotofacil"
        headers = {"accept": "application/json"}

        # 1Ô∏è‚É£ Obter o √∫ltimo concurso dispon√≠vel na API da Caixa
        response = requests.get(base_url, headers=headers, timeout=10)
        if response.status_code != 200:
            return "‚ùå Erro ao acessar API da Caixa (n√£o conseguiu obter o √∫ltimo concurso)."

        data = response.json()
        ultimo_disponivel = int(data["numero"])

        # 2Ô∏è‚É£ Obter CSV atual do GitHub
        token = os.getenv("GH_TOKEN")
        if not token:
            return "‚ùå Token do GitHub n√£o encontrado. Configure o segredo GH_TOKEN."

        g = Github(token)
        repo = g.get_repo("mulequim/lotofacil")
        file_path = "Lotofacil.csv"
        contents = repo.get_contents(file_path)
        csv_data = base64.b64decode(contents.content).decode("utf-8").strip().split("\n")

        linhas = [l.split(",") for l in csv_data]
        ultimo_no_csv = int(linhas[-1][0])

        # 3Ô∏è‚É£ Caso o CSV j√° esteja atualizado
        if ultimo_no_csv >= ultimo_disponivel:
            return f"‚úÖ Base j√° est√° atualizada (√∫ltimo concurso: {ultimo_disponivel})."

        novos_concursos = []
        for numero in range(ultimo_no_csv + 1, ultimo_disponivel + 1):
            url = f"{base_url}/{numero}"
            r = requests.get(url, headers=headers, timeout=10)
            if r.status_code != 200:
                print(f"‚ö†Ô∏è Concurso {numero} n√£o encontrado ou ainda n√£o dispon√≠vel.")
                continue

            dados = r.json()
            dezenas = [int(d) for d in dados["listaDezenas"]]

            # --- Extrair informa√ß√µes de premia√ß√£o ---
            rateios = {faixa["faixa"]: faixa for faixa in dados.get("listaRateioPremio", [])}
            premios = []
            for faixa in range(1, 6):  # Faixas 1 a 5 = 15 a 11 acertos
                faixa_info = rateios.get(faixa, {})
                valor = faixa_info.get("valorPremio", 0)
                ganhadores = faixa_info.get("numeroDeGanhadores", 0)
                valor_formatado = f"R$ {valor:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
                premios.extend([valor_formatado, str(ganhadores)])

            nova_linha = (
                [str(dados["numero"]), dados["dataApuracao"]] +
                [str(d) for d in dezenas] +
                premios
            )
            novos_concursos.append(nova_linha)
            print(f"‚úÖ Concurso {numero} obtido e adicionado com premia√ß√£o.")

        # 4Ô∏è‚É£ Atualizar CSV no GitHub
        if not novos_concursos:
            return "‚úÖ Nenhum concurso novo encontrado."

        # --- Cabe√ßalho completo, com as novas colunas ---
        cabecalho = (
            ["Concurso", "Data"] +
            [f"Bola{i}" for i in range(1, 16)] +
            ["Premio15", "Ganhadores15", "Premio14", "Ganhadores14",
             "Premio13", "Ganhadores13", "Premio12", "Ganhadores12",
             "Premio11", "Ganhadores11"]
        )

        # Verifica se o cabe√ßalho j√° est√° no arquivo
        if "Premio15" not in linhas[0]:
            # Substitui o cabe√ßalho antigo por um novo completo
            linhas[0] = cabecalho

        linhas.extend(novos_concursos)
        novo_csv = "\n".join([",".join(l) for l in linhas])

        repo.update_file(
            path=file_path,
            message=f"Atualiza concursos at√© {ultimo_disponivel} (com premia√ß√£o)",
            content=novo_csv,
            sha=contents.sha,
            branch="main"
        )

        return f"üéâ Base atualizada at√© o concurso {ultimo_disponivel} (adicionados {len(novos_concursos)} concursos com premia√ß√£o)."

    except Exception as e:
        return f"‚ùå Erro ao atualizar base: {e}"




# ---------------------------
# Gerar PDF simples com bol√£o
# ---------------------------
def gerar_pdf_jogos(jogos, nome="Bol√£o", participantes="", pix=""):
    participantes_lista = [p.strip() for p in participantes.split(",") if p.strip()]
    num_participantes = len(participantes_lista) if participantes_lista else 1
    valor_total = sum(calcular_valor_aposta(len(j)) for j, _ in jogos)
    valor_por_pessoa = valor_total / num_participantes if num_participantes else valor_total

    file_name = f"bolao_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    c = canvas.Canvas(file_name, pagesize=A4)
    largura, altura = A4
    y = altura - 2 * cm

    c.setFont("Helvetica-Bold", 14)
    c.drawString(2 * cm, y, f"üéØ {nome}")
    y -= 1 * cm
    c.setFont("Helvetica", 10)
    c.drawString(2 * cm, y, f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    y -= 0.8 * cm

    c.drawString(2 * cm, y, "Participantes:")
    y -= 0.5 * cm
    for p in participantes_lista:
        c.drawString(2.5 * cm, y, f"- {p}")
        y -= 0.4 * cm

    c.drawString(2 * cm, y, f"PIX: {pix if pix else '-'}")
    y -= 0.8 * cm

    c.drawString(2 * cm, y, f"Total de jogos: {len(jogos)}  |  Valor total: R$ {valor_total:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
    y -= 0.8 * cm

    for i, (jogo, origem) in enumerate(jogos, start=1):
        if y < 3 * cm:
            c.showPage()
            y = altura - 2 * cm
        c.setFont("Helvetica", 11)
        c.drawString(2 * cm, y, f"Jogo {i} ({len(jogo)} dezenas): {' '.join(str(d).zfill(2) for d in jogo)}")
        y -= 0.6 * cm

    c.save()
    return file_name
# Fun√ß√µes obter_concurso_atual_api, atualizar_csv_github, salvar_bolao_csv, gerar_pdf_jogos, e avaliar_jogos_historico
# devem ser copiadas do seu projeto original, pois o corpo delas √© espec√≠fico
# do seu ambiente (ex: ReportLab, requisi√ß√µes externas).
# Acima est√£o as principais fun√ß√µes de c√°lculo/estat√≠stica.
